// Code generated by ent, DO NOT EDIT.

package sensor

import (
	"ent-timescale/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SensorID applies equality check predicate on the "sensor_id" field. It's identical to SensorIDEQ.
func SensorID(v string) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSensorID), v))
	})
}

// Temperature applies equality check predicate on the "temperature" field. It's identical to TemperatureEQ.
func Temperature(v float64) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemperature), v))
	})
}

// ElectricCurrent applies equality check predicate on the "electric_current" field. It's identical to ElectricCurrentEQ.
func ElectricCurrent(v float64) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldElectricCurrent), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// SensorIDEQ applies the EQ predicate on the "sensor_id" field.
func SensorIDEQ(v string) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSensorID), v))
	})
}

// SensorIDNEQ applies the NEQ predicate on the "sensor_id" field.
func SensorIDNEQ(v string) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSensorID), v))
	})
}

// SensorIDIn applies the In predicate on the "sensor_id" field.
func SensorIDIn(vs ...string) predicate.Sensor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSensorID), v...))
	})
}

// SensorIDNotIn applies the NotIn predicate on the "sensor_id" field.
func SensorIDNotIn(vs ...string) predicate.Sensor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSensorID), v...))
	})
}

// SensorIDGT applies the GT predicate on the "sensor_id" field.
func SensorIDGT(v string) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSensorID), v))
	})
}

// SensorIDGTE applies the GTE predicate on the "sensor_id" field.
func SensorIDGTE(v string) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSensorID), v))
	})
}

// SensorIDLT applies the LT predicate on the "sensor_id" field.
func SensorIDLT(v string) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSensorID), v))
	})
}

// SensorIDLTE applies the LTE predicate on the "sensor_id" field.
func SensorIDLTE(v string) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSensorID), v))
	})
}

// SensorIDContains applies the Contains predicate on the "sensor_id" field.
func SensorIDContains(v string) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSensorID), v))
	})
}

// SensorIDHasPrefix applies the HasPrefix predicate on the "sensor_id" field.
func SensorIDHasPrefix(v string) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSensorID), v))
	})
}

// SensorIDHasSuffix applies the HasSuffix predicate on the "sensor_id" field.
func SensorIDHasSuffix(v string) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSensorID), v))
	})
}

// SensorIDEqualFold applies the EqualFold predicate on the "sensor_id" field.
func SensorIDEqualFold(v string) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSensorID), v))
	})
}

// SensorIDContainsFold applies the ContainsFold predicate on the "sensor_id" field.
func SensorIDContainsFold(v string) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSensorID), v))
	})
}

// TemperatureEQ applies the EQ predicate on the "temperature" field.
func TemperatureEQ(v float64) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemperature), v))
	})
}

// TemperatureNEQ applies the NEQ predicate on the "temperature" field.
func TemperatureNEQ(v float64) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTemperature), v))
	})
}

// TemperatureIn applies the In predicate on the "temperature" field.
func TemperatureIn(vs ...float64) predicate.Sensor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTemperature), v...))
	})
}

// TemperatureNotIn applies the NotIn predicate on the "temperature" field.
func TemperatureNotIn(vs ...float64) predicate.Sensor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTemperature), v...))
	})
}

// TemperatureGT applies the GT predicate on the "temperature" field.
func TemperatureGT(v float64) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTemperature), v))
	})
}

// TemperatureGTE applies the GTE predicate on the "temperature" field.
func TemperatureGTE(v float64) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTemperature), v))
	})
}

// TemperatureLT applies the LT predicate on the "temperature" field.
func TemperatureLT(v float64) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTemperature), v))
	})
}

// TemperatureLTE applies the LTE predicate on the "temperature" field.
func TemperatureLTE(v float64) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTemperature), v))
	})
}

// ElectricCurrentEQ applies the EQ predicate on the "electric_current" field.
func ElectricCurrentEQ(v float64) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldElectricCurrent), v))
	})
}

// ElectricCurrentNEQ applies the NEQ predicate on the "electric_current" field.
func ElectricCurrentNEQ(v float64) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldElectricCurrent), v))
	})
}

// ElectricCurrentIn applies the In predicate on the "electric_current" field.
func ElectricCurrentIn(vs ...float64) predicate.Sensor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldElectricCurrent), v...))
	})
}

// ElectricCurrentNotIn applies the NotIn predicate on the "electric_current" field.
func ElectricCurrentNotIn(vs ...float64) predicate.Sensor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldElectricCurrent), v...))
	})
}

// ElectricCurrentGT applies the GT predicate on the "electric_current" field.
func ElectricCurrentGT(v float64) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldElectricCurrent), v))
	})
}

// ElectricCurrentGTE applies the GTE predicate on the "electric_current" field.
func ElectricCurrentGTE(v float64) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldElectricCurrent), v))
	})
}

// ElectricCurrentLT applies the LT predicate on the "electric_current" field.
func ElectricCurrentLT(v float64) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldElectricCurrent), v))
	})
}

// ElectricCurrentLTE applies the LTE predicate on the "electric_current" field.
func ElectricCurrentLTE(v float64) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldElectricCurrent), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Sensor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Sensor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Sensor) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Sensor) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Sensor) predicate.Sensor {
	return predicate.Sensor(func(s *sql.Selector) {
		p(s.Not())
	})
}
